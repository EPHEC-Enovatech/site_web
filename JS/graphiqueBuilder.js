let charts={};function buildSimpleGraph(response,actionGraph,idCanvasDiv,idCanvas,titleGraph,idError,label,errorLabel,labelYData,typeData){switch(response.status){case 404:console.log("Pas de donnée disponible");if(charts[idCanvas]===undefined){buildEmptyGraph(idCanvas,"line")}
    resetCanvas(idCanvasDiv,idCanvas,titleGraph);break;case 401:$("#disconnectDiv").load("lostConnection.html");console.log("Vous n'êtes pas connecté");break;case 200:$('#'+idCanvasDiv).show();$('#'+idError).hide();let humidData=[];let humidDate=[];let data=response.responseJSON.data;data.forEach(function(item){let date=moment(new Date(item.timestamp)).format('LT');humidDate.push(date);humidData.push(item.data)});let datasets=[{label:label+" "+moment(response.responseJSON.data[0].timestamp).format('LL'),borderColor:'rgb(0, 0, 0)',borderWidth:1,pointBackgroundColor:colorGraph(typeData,humidData),pointBorderColor:'rgb(0, 0, 0)',pointRadius:5,data:humidData,}];if(actionGraph==="draw"){buildGraph(idCanvas,"line",humidDate,datasets,titleGraph,labelYData)}else if(actionGraph==="upDate"){let labelData=label+" "+moment(response.responseJSON.data[0].timestamp).format('LL');updateGraph(idCanvas,humidDate,humidData,labelData,titleGraph,labelYData,typeData,"line")}
    buildFailBack(idCanvas,humidData,humidDate,errorLabel,titleGraph);break;default:console.log("Erreur serveur")}}
function buildAverageGraphWeek(response,actionGraph,idCanvasDiv,idCanvas,titleGraph,idError,label,errorLabel,labelYData,typeData,startDate,endDate){switch(response.status){case 404:console.log("Pas de donnée disponible");if(charts[idCanvas]===undefined){buildEmptyGraph(idCanvas,"line",changeGraphClick)}
    resetCanvas(idCanvasDiv,idCanvas,titleGraph);break;case 401:$("#disconnectDiv").load("lostConnection.html");console.log("Vous n'êtes pas connecté");break;case 200:$('#'+idCanvasDiv).show();$('#'+idError).hide();let weekDay=[];let dataWeekDay=[];let averageData=0;let countAverage=0;let testDate=moment(startDate);let data=response.responseJSON.data;let dateFirstElem=moment(data[0].timestamp);while(moment(testDate).format("LL")!==moment(dateFirstElem).format("LL")){weekDay.push(moment(testDate).format("DD/MM"));dataWeekDay.push(0);testDate=moment(testDate).add(1,"d")}
    data.forEach(function(item){if(moment(item.timestamp).format("LL")===moment(testDate).format("LL")){averageData+=item.data;countAverage+=1}else{dataWeekDay.push((averageData/countAverage).toFixed(2));averageData=0;countAverage=0;weekDay.push(moment(testDate).format("DD/MM"));testDate=moment(testDate).add(1,"d");while(moment(item.timestamp).format("LL")!==moment(testDate).format("LL")){weekDay.push(moment(testDate).format("DD/MM"));dataWeekDay.push(0);testDate=moment(testDate).add(1,"d")}
        averageData+=item.data;countAverage+=1}
        if(item===data[data.length-1]){dataWeekDay.push((averageData/countAverage).toFixed(2))}});while(moment(testDate).format("LL")!==moment(endDate).format("LL")){weekDay.push(moment(testDate).format("DD/MM"));dataWeekDay.push(0);testDate=moment(testDate).add(1,"d")}
    let datasets=[{label:label+" "+moment(startDate).format("L")+" au "+moment(endDate).subtract(1,"d").format("L"),backgroundColor:colorGraph(typeData,dataWeekDay),borderColor:'rgb(0, 0, 0)',borderWidth:1,data:dataWeekDay}];if(actionGraph==="draw"){buildGraph(idCanvas,"bar",weekDay,datasets,titleGraph,labelYData,changeGraphClick)}else if(actionGraph==="upDate"){let labelData;if(moment(startDate).format("LL")===moment(endDate).subtract(1,"d").format("LL")){labelData=label+" "+moment(startDate).format("LL")}else{labelData=label+" "+moment(startDate).format("L")+" au "+moment(endDate).subtract(1,"d").format("L")}
        updateGraph(idCanvas,weekDay,dataWeekDay,labelData,titleGraph,labelYData,typeData,"bar")}
    buildFailBack(idCanvas,dataWeekDay,weekDay,errorLabel,"Valeurs moyennes récupérées sur la semaine");break;default:console.log("Erreur serveur")}}
function buildTableRecap(response,actionGraph,idCanvasDiv,idCanvas,titleGraph,idError){switch(response.status){case 404:console.log("Pas de donnée disponible");$('#'+idCanvasDiv).animate({opacity:0.0},200,function(){$('#'+idCanvasDiv).hide().css('opacity',1.0)});$('#'+idError+" .errorTitle").text(titleGraph);$('#'+idError).show();break;case 401:$("#disconnectDiv").load("lostConnection.html");console.log("Vous n'êtes pas connecté");break;case 200:$('#'+idCanvasDiv).show();$('#'+idError).hide();let dataCaptor=[undefined,undefined,undefined,undefined,undefined,undefined];const labelTable=["Humidité","Qualité de l'air","Température","Humidité du sol","Luminosité","Pression"];const unite=["%","AQI","°C","um","lux","Pa"];const data=response.responseJSON.data;data.forEach(function(item){switch(item.sensor_id){case 2:dataCaptor[0]=item.data;break;case 3:dataCaptor[1]=item.data;break;case 4:dataCaptor[2]=item.data;break;case 5:dataCaptor[3]=item.data;break;case 6:dataCaptor[4]=item.data;break;case 7:dataCaptor[5]=item.data;break}});const listCapteur=["humidite","qualite_air","temperature","humidite_terre","luminosite","pression"];let table="<caption>"+titleGraph+"</caption>";for(let i=0;i<labelTable.length;i++){let img="";table+="<tr><th class='data_"+i+"'>"+labelTable[i]+"</th>";if(dataCaptor[i]!==undefined){let colorTable=colorGraph(listCapteur[i],[dataCaptor[i]]);if(colorTable[0]==='rgba(46, 204, 64, 0.5)'){img="./IMG/graph/success.svg"}else{img="./IMG/graph/error.svg"}
    table+="<td class='dataCell' onclick=changeSelectCaptorGraph('"+listCapteur[i]+"')><div><span></span><p>"+dataCaptor[i]+" "+unite[i]+"</p><img alt='Donnée bonne pour la plante' src="+img+"></div></td></tr>"}else{table+="<td><div><span></span><p>Pas de données</p><img alt='Donnée trop faible ou trop haute' src='./IMG/graph/error.svg'></div></td></tr>"}}
    $("#"+idCanvas).html(table);break;default:console.log("Erreur serveur")}}
function changeSelectCaptorGraph(newValue){let newValueMaj=newValue.charAt(0).toUpperCase()+newValue.slice(1);$('#selectCaptorGraph').val(newValueMaj).trigger("change")}
function buildGraph(id,type,labels,datasets,title,labelYData,func){let ctx=document.getElementById(id).getContext('2d');charts[id]=(new Chart(ctx,{type:type,data:{labels:labels,datasets:datasets},options:{title:{display:!0,text:title},responsive:!0,maintainAspectRatio:!1,onClick:func,scales:{yAxes:[{scaleLabel:{display:!0,labelString:labelYData}}]},legend:{labels:{boxWidth:0}},tooltips:{displayColors:!1}}}))}
function buildEmptyGraph(id,type,func){buildGraph(id,type,["a","b","c","d","e"],[{label:"Pas de donnée",borderColor:'rgb(0, 0, 0)',borderWidth:1,pointBorderColor:'rgb(0, 0, 0)',pointRadius:5,data:[0,0,0,0,0],}],"Pas de donnée",'value',func)}
function changeGraphClick(evt){let bar=this.getElementAtEvent(event);if(!bar.length)return;let dateBar=bar[0]._model.label;let dateGraph=dateBar.replace(/\//g,"-");let selectedCaptor=$('#selectBoxGraph').val();let captor=($('#selectCaptorGraph').val()).toLowerCase();let endpoint="records/"+selectedCaptor+"/"+captor+"/"+dateGraph+"-2018";let typeData=captor.toLowerCase();let titleLabelData=titreGraphFr[typeData];let titleLabelDataAverage=titreGraphMoyenneFr[typeData];let labelYData=labelY[typeData];callAPIForGraph(endpoint,buildSimpleGraph,"upDate","divCanvasDetail","graphCanvasDetail",titleLabelData,"errorgraphCanvasDetail",titleLabelData+" le",["Heure",titleLabelData],labelYData,typeData);callAPIForGraph("records/"+selectedCaptor+"/all/"+dateGraph+"-2018",buildTableRecap,"upDate","divCanvasRecap","tableRecap","Les dernières données du "+dateGraph+"-2018","errorgraphCanvasRecap")}
function buildFailBack(id,data,titreData,titreCol,legende){let failBack="<table><caption>"+legende+"</caption><tr>";titreCol.forEach(function(item){failBack+="<th>"+item+"</th>"});failBack+="</tr>";for(item in titreData){failBack+="<tr><td>"+titreData[item]+"</td><td>"+data[item]+"</td></tr>"}
    failBack+="</table>";$('#'+id).html(failBack)}
function resetCanvas(idCanvasDiv,idCanvas,title){$('#'+idCanvasDiv).animate({opacity:0.0},200,function(){$('#'+idCanvasDiv).hide().css('opacity',1.0)});$('#error'+idCanvas+" .errorTitle").text(title);$('#error'+idCanvas).show()}
function destroyAllCanvas(){for(let i=0;i<charts.length;i++){charts[i].destroy()}
    charts=[]}
function updateGraph(id,label,data,labelData,titreGraph,labelYData,typeData,typeGraph){let chart=charts[id];chart.config.data.labels=label;chart.data.datasets[0].data=data;if(labelData!==undefined){chart.data.datasets[0].label=labelData}
    if(titreGraph!==undefined){chart.options.title.text=titreGraph}
    if(labelYData!==undefined){chart.options.scales.yAxes[0].scaleLabel.labelString=labelYData}
    daltonMode(id,typeData,typeGraph,daltonienEnabled)}
function daltonMode(id,capteur,type,setDalton=!0){let chart=charts[id];let graphData=chart.data.datasets[0].data;if(setDalton){if(type==="bar"){chart.data.datasets[0].backgroundColor=colorGraph(capteur,graphData,daltonienEnabled)}else if(type==="line"){chart.data.datasets[0].pointBackgroundColor=colorGraph(capteur,graphData,daltonienEnabled)}}else{if(type==="line"){chart.data.datasets[0].pointBackgroundColor=colorGraph(capteur,graphData)}else if(type==="bar"){chart.data.datasets[0].backgroundColor=colorGraph(capteur,graphData,daltonienEnabled)}}
    chart.update()}
let daltonienEnabled=!1;function colorGraph(capteur,data,daltonien=!1){let green='rgba(46, 204, 64, 0.5)';let red='rgba(255, 65, 54, 0.5)';const minMaxData={"humidite":[40,60],"qualite_air":[0,400],"temperature":[15,25],"humidite_terre":[700,900],"luminosite":[0,1000],"pression":[950,1050]};let interval=minMaxData[capteur];let color=[];if(daltonien){let patternCanvas=document.createElement("canvas"),patternContext=patternCanvas.getContext("2d");patternCanvas.width=10;patternCanvas.height=10;patternContext.beginPath();patternContext.fillStyle=red;patternContext.fillRect(0,0,10,10);patternContext.strokeRect(0.5,0.5,10,10);patternContext.stroke();let redPattern=patternContext.createPattern(patternCanvas,"repeat");for(let i=0;i<data.length;i++){if(data[i]<interval[0]||data[i]>interval[1]){color.push(redPattern)}else{color.push(green)}}}else{for(let i=0;i<data.length;i++){if(data[i]<interval[0]||data[i]>interval[1]){color.push(red)}else{color.push(green)}}}
    return color}